set rtp +=~/.vim/versioned

syntax off
filetype off

" let me use 2 tabs if i want
let g:python_recommended_style = 0
if filereadable(expand("~/brew/bin/python3"))
    let g:python3_host_prog = expand("~/brew/bin/python3")
else
    let g:python3_host_prog = '/usr/bin/python3'
endif

" lots of things that neovim does for me already
if !has('nvim')
    set autoindent
    set backspace=indent,eol,start
    " Some locales are silly.
    set encoding=utf-8
    set history=10000 " Be modern
    " search patterns
    set hlsearch
    " move in file when typing /pattern
    set incsearch
    set laststatus=2 " Always show statusline.
    set mouse=a
    set nocompatible
    set smarttab
    " usually we're fast, but with urxvt color it's not always obvious
    set ttyfast
    set wildmenu
endif

" mutiple vulnerabilities.
set nomodeline

let s:win_shell = (has('win32') || has('win64')) && &shellcmdflag =~ '/'
let s:vimDir = s:win_shell ? '$HOME/vimfiles' : '~/.vim'
" Avoid issues when running in fish.
set shell=/bin/bash

call plug#begin(expand(s:vimDir . '/plugged'))
" Colorschemes
Plug 'justinmk/molokai'
Plug 'KeitaNakamura/neodark.vim'
Plug 'chriskempson/base16-vim'
Plug 'rakr/vim-one'

" Those 2 go together
" Plug 'sheerun/vim-polyglot'
Plug 'trevordmiller/nova-vim'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" This requires fancy patched fonts, e.g. DejaVu Sans Mono for Powerline (10)
" See https://github.com/Lokaltog/powerline-fonts
" The gnome terminal and/or .Xresources must be configured for it.
let g:airline_powerline_fonts = 1
" Different font names for different OSes. :h11 is for MacOS/win.
if has("gui_running")
    if has("gui_gtk2")
        set guifont=Hack
    else
        set guifont=Hack:h11
    endif
endif
" blank the fileencoding / fileformat part
let g:airline_section_y = ''

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
" Support for color fixes in .vim/after
" Disabled to see how that works with nova theme
" Plug 'vim-scripts/AfterColors.vim'
" Some vcs integration
" Plug 'vim-scripts/vcscommand.vim'
" Open correctly files: vim filename:103
Plug 'paulhybryant/file-line'

" Disable native MatchParen for better things.
Plug 'luochen1990/rainbow'
let g:rainbow_conf = {
   \ 'guifgs': ['#DAD996', '#F1C392', '#D08FC1', '#9A95DF'],
   \ 'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],}
let g:rainbow_active = 1
let loaded_matchparen = 1

Plug 'nathangrigg/vim-beancount'
let g:linuxsty_patterns = [ "/home/ndumazet/code/kernel" ]
Plug 'vivien/vim-linux-coding-style'

" Some scripts need newer vims
if (v:version > 700)
    " Plug 'scrooloose/syntastic'
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '⚠'
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_aggregate_errors = 1
    " Faster than syntastic?
    " Plug 'w0rp/ale'
    let g:ale_sign_error = '✗'
    let g:ale_sign_warning = '⚠'
    let g:ale_sign_style_error = '✗'
    let g:ale_sign_style_warning = '⚠'
    let g:airline#extensions#ale#enabled = 1

    " Export highlighted html to pastebin.
    Plug 'google/maktaba' | Plug 'google/vim-syncopate'
    " git / perforce side colors
    Plug 'mhinz/vim-signify'
endif
" See all 256 colors with :XtermColorTable
Plug 'guns/xterm-color-table.vim'
let g:signify_vcs_list = ['git', 'perforce']
let g:signify_vcs_cmds = {
    \ 'perforce': 'p4 info >& /dev/null && env G4MULTIDIFF=0 P4DIFF=%d p4 diff -dU0 %f'
    \ }
let g:signify_sign_delete = '-'
" Whitespace highlighting / :StripWhitespace
Plug 'ntpeters/vim-better-whitespace'
" typescript highlighting
Plug 'leafgarland/typescript-vim'
" Ultisnips engine, no snippets.
Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsJumpForwardTrigger = "<c-j>"
let g:UltiSnipsJumpBackwardTrigger = "<c-k>"

" Show content of " registers
Plug 'junegunn/vim-peekaboo'
Plug 'nathangrigg/vim-beancount'

call plug#end()

syntax on
filetype plugin indent on

set background=dark
if has('nvim') || has('termguicolors')
  set termguicolors
  if !empty(globpath(&rtp, 'colors/nova.vim'))
      " Not here during first installation
      colorscheme nova
  endif
endif

set expandtab
set tabstop=4
set shiftwidth=4

set number " Show line numbers

set ruler " Show cursor position on statusline.
set scrolloff=5 " 5 lines around the cursor

if (v:version > 703 || v:version == 703 && has("patch541"))
    set formatoptions+=rj " Remove comment characters and others on J
endif

if exists("+inccommand")
    set inccommand=nosplit
endif

set foldmethod=marker
set fillchars=vert:┃,fold:- " Nicer vertical split

set clipboard=unnamed " unify clipboards

" completions
set wildmode=longest,list,full
set wildignore=*.swp,*.bak,*.pyc,*.class

" c was introduced in 7.04
if v:version >= 704
    set shortmess=aToOc
else
    set shortmess=aToO
endif

set cmdheight=2
set noswapfile

set hidden

" Whitespace and long lines
if v:version >= 703
    let &colorcolumn=join(range(81,400),",")
    autocmd FileType qf setlocal colorcolumn=
endif
set list
set listchars=tab:»·,extends:#,nbsp:·  " Show me tabs and nbsp

augroup filetypedetect
    autocmd BufRead,BufNewFile */*localhost*.js* setf javascript
    autocmd BufRead,BufNewFile */mediawiki* setlocal noexpandtab

    " It's all text/external editor support
    " Mail?
    autocmd BufRead *mail.google.com* setf mail
    autocmd BufRead *tmp/*flagfile* setf sh

    autocmd FileType gitcommit DiffGitCached | wincmd p

    autocmd FileType html setlocal shiftwidth=2 tabstop=2
    autocmd FileType python setlocal shiftwidth=2 tabstop=2
    " Regenerating mako files takes a few seconds for webdev things.
    autocmd BufWritePost *.mako silent make
    " Open cwindow in case of make errors
    autocmd QuickFixCmdPost *make* cwindow
augroup END

"{{{ Keyboard
    " Unbind the cursor keys in insert, normal and visual modes.
    for prefix in ['i', 'n', 'v']
      for key in ['<Up>', '<Down>', '<Left>', '<Right>']
        exe prefix . "noremap " . key . " <Nop>"
      endfor
    endfor

    " space to PageDown, similar to vimperator
    map <space> <C-f>

    " easier keyboard, when I accidentally hit F1 instead of Esc.
    map <F1> <Esc>
    imap <F1> <Esc>
    imap <M-Space> <Esc>

    " CTRL-h to toggle search highlight
    map <C-H> :se invhls<cr>

    let mapleader=","
    map <leader>v :Vex!<cr>
    map <leader>s :Hex<cr>

    command WQ wq
    command Wq wq
    command W w
    command Q q

    " Use <F7> to toggle between 'paste' and 'nopaste'
    set pastetoggle=<F7>
"}}}

let g:ackprg="ack -H --nocolor --nogroup --column --ignore-dir build"

function! SetupDiffFunc()
  if &readonly
    set nomod nolist noma filetype=diff
    map q :q<CR>
  endif
endfunction
command! SetupDiff call SetupDiffFunc()

" brace completion
inoremap {<CR> {<CR><Esc>:call MySmartBraceComplete()<CR>O
function! MySmartBraceComplete()
  if getline(line('.')-1) =~ '^\s*\(class\|struct\)'
    normal i};
  else
    normal i}
  endif
endfunction

" Maximize gvim on startup.
if s:win_shell
  au GUIEnter * simalt ~x
endif

" map OSC52 copy-paste (from osc52.vim plugin)
vmap <C-c> y:call SendViaOSC52(getreg('"'))<cr>

" no flashing or beeping
set vb t_vb= novisualbell
" No damn bell in gvim
au GUIEnter * set visualbell t_vb=

" And last, machine / Google-specific settings are there:
if filereadable(expand("~/.vimrc.after"))
  source ~/.vimrc.after
endif
